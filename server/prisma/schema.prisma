generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Dysfunction {
  id           String            @id @default(uuid())
  connectionId String
  reason       String
  startDate    DateTime
  endDate      DateTime?
  statusId     String
  status       DysfunctionStatus @relation(fields: [statusId], references: [code])
  connection   Connection        @relation(fields: [connectionId], references: [id])
}

model Connection {
  id             String        @id @default(uuid())
  subscriptionId String
  technologyId   String
  technology     Technology    @relation(fields: [technologyId], references: [id])
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  dysfunction    Dysfunction[]
}

model Technology {
  id         String        @id @default(uuid())
  name       String
  debitMin   Int
  debitMax   Int
  connection Connection[]
  technology Eligibility[]
}

model Subscription {
  id         String             @id @default(uuid())
  ownerId    String
  supplierId String
  statusId   String
  connection Connection[]
  status     SubscriptionStatus @relation(fields: [statusId], references: [code])
  supplier   ISP                @relation(fields: [supplierId], references: [id])
  owner      User               @relation(fields: [ownerId], references: [id])
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String
  locationId   String
  eligibility  Eligibility[]
  subscription Subscription[]
  location     Location       @relation(fields: [locationId], references: [id])
}

model Location {
  id            String          @id @default(uuid())
  address       String
  postalCode    String
  city          String
  copperClosure CopperClosure[]
  user          User[]
}

model ISP {
  id           String         @id @default(uuid())
  name         String
  eligibility  Eligibility[]
  subscription Subscription[]
}

model Eligibility {
  id           String            @id @default(uuid())
  technologyId String
  userId       String
  supplierId   String
  statusId     String
  status       EligibilityStatus @relation(fields: [statusId], references: [code])
  supplier     ISP               @relation(fields: [supplierId], references: [id])
  user         User              @relation(fields: [userId], references: [id])
  technology   Technology        @relation(fields: [technologyId], references: [id])
}

model CopperClosure {
  id         String              @id @default(uuid())
  locationId String
  startDate  DateTime
  endDate    DateTime?
  statusId   String
  status     CopperClosureStatus @relation(fields: [statusId], references: [code])
  location   Location            @relation(fields: [locationId], references: [id])
}

model DysfunctionStatus {
  code         String        @id
  dysfunctions Dysfunction[]
}

model SubscriptionStatus {
  code          String         @id
  subscriptions Subscription[]
}

model EligibilityStatus {
  code          String        @id
  eligibilities Eligibility[]
}

model CopperClosureStatus {
  code           String          @id
  copperClosures CopperClosure[]
}

model Service {
  id        String   @id @default(uuid())
  name      String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schemas   Schema[]
}

model SchemaVersion {
  id        String   @id @default(uuid())
  version   Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  schemas   Schema[]
}

model Schema {
  id        String        @id @default(uuid())
  name      String
  serviceId String
  versionId String
  isActive  Boolean
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  versions  SchemaVersion @relation(fields: [versionId], references: [id])
  service   Service       @relation(fields: [serviceId], references: [id])
}
