// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Model definitions

model Dysfunction {
  id          String   @id @default(uuid())
  connection  Connection @relation(fields: [connectionId], references: [id])
  connectionId String
  reason      String
  startDate   DateTime
  endDate     DateTime?
  status      DysfunctionStatus @relation(fields: [statusId], references: [code])
  statusId    String
}

model Connection {
  id            String        @id @default(uuid())
  dysfunction   Dysfunction[]
  subscription  Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String
  technology    Technology  @relation(fields: [technologyId], references: [id])
  technologyId  String
  
}

model Technology {
  id        String   @id @default(uuid())
  name      String
  debitMin  Int
  debitMax  Int
  connection Connection[]
  technology Eligibility[]
}

model Subscription {
  id        String   @id @default(uuid())
  owner     User    @relation(fields: [ownerId], references: [id])
  ownerId  String
  supplier  ISP    @relation(fields: [supplierId], references: [id])
  supplierId String
  status    SubscriptionStatus @relation(fields: [statusId], references: [code])
  statusId  String
  connection Connection[]
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String
  location  Location @relation(fields: [locationId], references: [id])
  locationId String
  subscription Subscription[]
  eligibility Eligibility[]
}

model Location {
  id         String   @id @default(uuid())
  address    String
  postalCode String
  city       String
  user       User[]
  copperClosure CopperClosure[]
}

model ISP {
  id   String   @id @default(uuid())
  name String
  subscription Subscription[]
  eligibility Eligibility[]
}

model Eligibility {
  id         String   @id @default(uuid())
  technology Technology @relation(fields: [technologyId], references: [id])
  technologyId String
  user       User @relation(fields: [userId], references: [id])
  userId    String
  supplier   ISP @relation(fields: [supplierId], references: [id])
  supplierId String
  status     EligibilityStatus @relation(fields: [statusId], references: [code])
  statusId   String
}

model CopperClosure {
  id        String   @id @default(uuid())
  location  Location @relation(fields: [locationId], references: [id])
  locationId String
  startDate DateTime
  endDate   DateTime?
  status    CopperClosureStatus @relation(fields: [statusId], references: [code])
  statusId  String
}

model DysfunctionStatus {
  code String @id
  dysfunctions Dysfunction[]
}

model SubscriptionStatus {
  code String @id
  subscriptions Subscription[]
}

model EligibilityStatus {
  code String @id
  eligibilities Eligibility[]
}

model CopperClosureStatus {
  code String @id
  copperClosures CopperClosure[]
}

// Schema registry

model Service {
  id        String   @id @default(uuid())
  name      String
  schemas   Schema[]
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model SchemaVersion {
  id        String   @id @default(uuid())
  version   Int
  content   String
  schemas   Schema[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schema {
  id        String   @id @default(uuid())
  name      String
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String
  versions  SchemaVersion @relation(fields: [versionId], references: [id])
  versionId String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
